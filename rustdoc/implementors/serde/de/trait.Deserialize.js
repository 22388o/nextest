(function() {var implementors = {};
implementors["camino"] = [{"text":"impl&lt;'de: 'a, 'a&gt; Deserialize&lt;'de&gt; for &amp;'a Utf8Path","synthetic":false,"types":[]},{"text":"impl&lt;'de&gt; Deserialize&lt;'de&gt; for Utf8PathBuf","synthetic":false,"types":[]}];
implementors["serde_json"] = [{"text":"impl&lt;'de&gt; Deserialize&lt;'de&gt; for Map&lt;String, Value&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'de&gt; Deserialize&lt;'de&gt; for Value","synthetic":false,"types":[]},{"text":"impl&lt;'de&gt; Deserialize&lt;'de&gt; for Number","synthetic":false,"types":[]}];
implementors["testrunner"] = [{"text":"impl&lt;'de&gt; Deserialize&lt;'de&gt; for FilterMatch","synthetic":false,"types":[]},{"text":"impl&lt;'de&gt; Deserialize&lt;'de&gt; for MismatchReason","synthetic":false,"types":[]},{"text":"impl&lt;'de&gt; Deserialize&lt;'de&gt; for TestBinary","synthetic":false,"types":[]},{"text":"impl&lt;'de&gt; Deserialize&lt;'de&gt; for TestList","synthetic":false,"types":[]},{"text":"impl&lt;'de&gt; Deserialize&lt;'de&gt; for TestBinInfo","synthetic":false,"types":[]},{"text":"impl&lt;'de&gt; Deserialize&lt;'de&gt; for RustTestInfo","synthetic":false,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()