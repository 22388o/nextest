(function() {var implementors = {};
implementors["anyhow"] = [{"text":"impl AsRef&lt;dyn Error + 'static + Sync + Send&gt; for Error","synthetic":false,"types":[]},{"text":"impl AsRef&lt;dyn Error + 'static&gt; for Error","synthetic":false,"types":[]}];
implementors["camino"] = [{"text":"impl AsRef&lt;Utf8Path&gt; for Utf8Components&lt;'_&gt;","synthetic":false,"types":[]},{"text":"impl AsRef&lt;Path&gt; for Utf8Components&lt;'_&gt;","synthetic":false,"types":[]},{"text":"impl AsRef&lt;str&gt; for Utf8Components&lt;'_&gt;","synthetic":false,"types":[]},{"text":"impl AsRef&lt;OsStr&gt; for Utf8Components&lt;'_&gt;","synthetic":false,"types":[]},{"text":"impl AsRef&lt;Utf8Path&gt; for Iter&lt;'_&gt;","synthetic":false,"types":[]},{"text":"impl AsRef&lt;Path&gt; for Iter&lt;'_&gt;","synthetic":false,"types":[]},{"text":"impl AsRef&lt;str&gt; for Iter&lt;'_&gt;","synthetic":false,"types":[]},{"text":"impl AsRef&lt;OsStr&gt; for Iter&lt;'_&gt;","synthetic":false,"types":[]},{"text":"impl AsRef&lt;Utf8Path&gt; for Utf8Component&lt;'_&gt;","synthetic":false,"types":[]},{"text":"impl AsRef&lt;Path&gt; for Utf8Component&lt;'_&gt;","synthetic":false,"types":[]},{"text":"impl AsRef&lt;str&gt; for Utf8Component&lt;'_&gt;","synthetic":false,"types":[]},{"text":"impl AsRef&lt;OsStr&gt; for Utf8Component&lt;'_&gt;","synthetic":false,"types":[]},{"text":"impl AsRef&lt;Utf8Path&gt; for Utf8Path","synthetic":false,"types":[]},{"text":"impl AsRef&lt;Utf8Path&gt; for Utf8PathBuf","synthetic":false,"types":[]},{"text":"impl AsRef&lt;Utf8Path&gt; for str","synthetic":false,"types":[]},{"text":"impl AsRef&lt;Utf8Path&gt; for String","synthetic":false,"types":[]},{"text":"impl AsRef&lt;Path&gt; for Utf8Path","synthetic":false,"types":[]},{"text":"impl AsRef&lt;Path&gt; for Utf8PathBuf","synthetic":false,"types":[]},{"text":"impl AsRef&lt;str&gt; for Utf8Path","synthetic":false,"types":[]},{"text":"impl AsRef&lt;str&gt; for Utf8PathBuf","synthetic":false,"types":[]},{"text":"impl AsRef&lt;OsStr&gt; for Utf8Path","synthetic":false,"types":[]},{"text":"impl AsRef&lt;OsStr&gt; for Utf8PathBuf","synthetic":false,"types":[]}];
implementors["crossbeam_epoch"] = [{"text":"impl&lt;T:&nbsp;?Sized + Pointable&gt; AsRef&lt;T&gt; for Owned&lt;T&gt;","synthetic":false,"types":[]}];
implementors["either"] = [{"text":"impl&lt;L, R, Target&gt; AsRef&lt;Target&gt; for Either&lt;L, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;L: AsRef&lt;Target&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: AsRef&lt;Target&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;L, R&gt; AsRef&lt;str&gt; for Either&lt;L, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;L: AsRef&lt;str&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: AsRef&lt;str&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;L, R, Target&gt; AsRef&lt;[Target]&gt; for Either&lt;L, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;L: AsRef&lt;[Target]&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: AsRef&lt;[Target]&gt;,&nbsp;</span>","synthetic":false,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()